import torch
from utilities import NeuralNetwork, create_save_path
from dataset import DatasetHelmholtz2D
from model import PINNHelmholtz2D

# Parameter
a_1 = 6
a_2 = 6
lam = 1.0
# domain
bound_l = -1
bound_r = 1
bound_t = 1
bound_d = -1
layers = [2, 128, 128, 128, 1]
batch_size = 10000
bound_weight = 1
pseudo_weight = 1
pseudo_max_len = batch_size * 2
pseudo_update_rate = 0.01

if __name__ == '__main__':
    # load device
    device = torch.device(f"cuda:0" if torch.cuda.is_available() else "cpu")
    print(f"Use GPU: {torch.cuda.is_available()}\n")
    # create save path
    save_path = f"../output/Helmholtz2D-a1_{a_1}_a2_{a_2}/STPINN/"
    log_path, model_path, pic_path = create_save_path(save_path)
    # load dataset
    dataset = DatasetHelmholtz2D(a_1, a_2, lam, bound_l, bound_r, bound_t, bound_d, pseudo_max_len, pseudo_update_rate)
    X_star, U_star = dataset.get_test_batch(10000)
    # create model
    network = NeuralNetwork(X_star, layers, device).to(device)
    print(network)
    pinn = PINNHelmholtz2D(network, dataset, batch_size, bound_weight, pseudo_weight, log_path, model_path, pic_path,
                           device)
    # train model
    pinn.train(lr_rate=1e-3, decay_factor=0.5, total_it=15010, print_it=10, evaluate_it=100, pic_it=1000, lr_it=10000,
               pseudo_it=100)

